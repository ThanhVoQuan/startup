var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.411,1,2.186]],["body/controllers/AppController.html",[0,2.397,1,3.099,2,1.502,3,0.369,4,0.369,5,0.25,6,2.977,7,1.483,8,3.9,9,0.411,10,1.28,11,2.248,12,5.652,13,1.392,14,0.029,15,3.542,16,3.469,17,5.652,18,4.158,19,2.977,20,3.469,21,3.469,22,0.6,23,3.542,24,1.534,25,4.751,26,4.158,27,2,28,0.613,29,0.766,30,3.964,31,3.9,32,1.763,33,2.977,34,1.392,35,1.291,36,3.193,37,2.977,38,3.099,39,3.542,40,0.369,41,0.11,42,1.392,43,1.502,44,1.922,45,2.106,46,1.502,47,1.114,48,3.099,49,2.606,50,0.892,51,3.542,52,0.02,53,0.02]],["title/modules/AppModule.html",[54,1.213,55,2.186]],["body/modules/AppModule.html",[1,2.776,2,1.492,3,0.44,4,0.244,5,0.249,14,0.029,28,0.648,29,0.507,36,2.866,37,1.97,40,0.244,41,0.073,44,2.547,47,0.737,50,0.886,52,0.015,53,0.015,54,1.282,55,4.053,56,1.075,57,1.492,58,1.97,59,1.97,60,1.97,61,3.141,62,3.141,63,3.141,64,3.141,65,1.908,66,1.271,67,1.075,68,2.343,69,2.092,70,3.306,71,2.343,72,3.946,73,3.789,74,1.393,75,2.343,76,1.97,77,1.97,78,1.54,79,3.517,80,1.167,81,3.55,82,2.343,83,2.776,84,3.085,85,2.343,86,2.343,87,3.517,88,1.97,89,1.97,90,2.343,91,2.343,92,2.343,93,2.343,94,2.343,95,2.343,96,2.343,97,1.97,98,2.343,99,2.588,100,2.343,101,1.97,102,2.343,103,1.97,104,2.343,105,1.97,106,2.343,107,1.97,108,2.343,109,1.97,110,2.343,111,1.97,112,2.343,113,1.97,114,2.343,115,1.97,116,2.343,117,2.343,118,3.107,119,3.55,120,1.97,121,2.343,122,2.343,123,2.343,124,1.724,125,2.343,126,0.272,127,2.343,128,2.343,129,2.343,130,2.343,131,2.343,132,0.921,133,2.343,134,0.994,135,2.343,136,1.271,137,2.343,138,1.393,139,2.343,140,2.343,141,2.343,142,3.517,143,2.957,144,2.343,145,2.337,146,1.724,147,2.343,148,2.343,149,4.223,150,4.694,151,3.517,152,3.517,153,1.492,154,3.517,155,1.991,156,3.517,157,3.517,158,2.343,159,3.517,160,2.343,161,2.343,162,2.343,163,2.343,164,2.343,165,2.343,166,2.343,167,2.343,168,2.343,169,2.343,170,2.343,171,2.343,172,2.343]],["title/injectables/AppService.html",[36,1.805,173,0.838]],["body/injectables/AppService.html",[3,0.376,4,0.376,5,0.255,7,1.202,9,0.419,10,1.295,14,0.029,22,0.808,24,1.545,25,4.977,26,4.356,28,0.593,29,0.78,33,4.496,34,1.417,35,1.315,36,2.589,40,0.376,41,0.112,42,2.237,43,1.53,44,3.088,46,1.53,47,1.134,50,0.909,52,0.02,53,0.02,83,2.371,84,3.137,118,2.653,126,0.419,146,3.511,173,1.202,174,1.655,175,3.032,176,4.012,177,5.693,178,3.607,179,6.3,180,3.607,181,1.054,182,0.664,183,0.909,184,3.607,185,3.607,186,3.607,187,1.796,188,3.607,189,3.607,190,3.607,191,2.653,192,3.607,193,3.032,194,2.371]],["title/controllers/AuthController.html",[0,1.411,195,2.186]],["body/controllers/AuthController.html",[0,1.896,2,1.094,3,0.269,4,0.269,5,0.182,7,1.593,9,0.3,10,1.025,11,2.321,13,1.484,14,0.029,18,2.779,19,3.176,20,3.619,22,0.64,24,1.025,27,1.602,28,0.604,29,0.558,31,4.158,32,1.285,34,1.014,35,0.941,38,2.938,40,0.269,41,0.08,42,1.484,43,2.087,44,2.05,46,1.602,48,3.596,49,2.779,50,0.952,52,0.016,53,0.016,126,0.439,181,1.104,182,0.696,183,0.952,187,1.881,195,2.483,196,2.169,197,1.898,198,2.58,199,3.852,200,4.264,201,4.136,202,2.58,203,3.114,204,2.58,205,4.92,206,4.92,207,3.778,208,4.92,209,4.92,210,2.58,211,4.92,212,3.176,213,2.247,214,3.176,215,2.247,216,3.254,217,3.234,218,2.58,219,3.114,220,2.58,221,4.92,222,2.58,223,2.58,224,1.696,225,2.169,226,2.169,227,2.169,228,1.933,229,1.696,230,2.841,231,2.169,232,2.169,233,2.58,234,2.169,235,2.58,236,2.58,237,2.169,238,2.169,239,2.58,240,2.58,241,1.733,242,0.817,243,2.247,244,2.58,245,3.778,246,2.58,247,2.58,248,2.58]],["title/modules/AuthModule.html",[54,1.213,61,1.978]],["body/modules/AuthModule.html",[2,1.872,3,0.334,4,0.334,5,0.227,11,1.362,14,0.029,28,0.662,29,0.694,40,0.334,41,0.1,50,0.809,52,0.019,53,0.019,54,1.609,56,1.474,57,1.872,61,3.814,65,2.394,66,1.742,67,1.474,69,2.624,70,2.901,72,4.239,73,3.568,74,1.91,78,2.111,80,1.599,118,2.363,119,2.7,195,3.314,228,2.31,229,2.111,230,3.479,231,2.7,242,0.694,249,2.7,250,2.7,251,2.7,252,3.814,253,3.211,254,3.71,255,3.211,256,2.363,257,3.211,258,2.111,259,2.025,260,3.211,261,2.111,262,1.599,263,3.211,264,3.211,265,2.7,266,3.211,267,3.211,268,1.91,269,3.211,270,3.211,271,2.7,272,3.211,273,4.413,274,3.211,275,1.599]],["title/injectables/AuthService.html",[173,0.838,230,1.805]],["body/injectables/AuthService.html",[3,0.253,4,0.253,5,0.171,7,0.909,9,0.282,10,0.98,11,2.27,14,0.029,22,0.809,24,1.296,27,2.27,28,0.593,29,0.524,34,0.953,35,0.884,40,0.253,41,0.075,42,1.876,43,2.27,44,2.903,46,2.27,50,0.909,52,0.015,53,0.015,73,3.642,74,1.442,126,0.593,132,1.876,134,1.531,136,1.958,155,1.029,173,0.909,174,1.113,181,1.26,182,0.94,183,1.086,187,2.664,199,2.655,200,1.784,203,3.036,215,2.146,216,2.564,217,1.594,224,2.372,227,2.039,228,2.286,229,1.594,230,1.958,232,2.039,241,1.113,242,1.342,243,1.442,256,1.784,262,1.208,268,2.84,275,2.146,276,2.039,277,1.531,278,4.775,279,4.311,280,4.311,281,2.425,282,5.694,283,3.61,284,2.425,285,2.425,286,3.034,287,2.655,288,4.189,289,3.034,290,2.425,291,2.425,292,3.61,293,2.372,294,3.034,295,3.61,296,3.034,297,3.624,298,3.034,299,3.034,300,3.624,301,3.61,302,2.425,303,2.039,304,1.656,305,2.146,306,2.146,307,2.425,308,2.425,309,2.425,310,2.425,311,3.61,312,2.425,313,1.784,314,1.784,315,2.039,316,2.425]],["title/injectables/CaslFactory.html",[173,0.838,317,1.656]],["body/injectables/CaslFactory.html",[3,0.356,4,0.356,5,0.242,9,0.397,10,1.25,14,0.029,22,0.579,24,0.928,28,0.58,29,0.739,34,1.343,35,1.679,40,0.48,41,0.106,50,0.861,52,0.02,53,0.02,126,0.647,132,1.343,155,1.45,173,1.16,174,1.569,181,0.999,182,0.63,183,0.861,241,1.569,242,1.346,262,1.702,317,2.293,318,2.515,319,4.605,320,4.605,321,3.419,322,3.097,323,4.605,324,4.605,325,4.605,326,3.871,327,2.874,328,2.515,329,2.874,330,3.419,331,4.605,332,3.871,333,3.419,334,3.388,335,3.419,336,3.419,337,3.419,338,3.871,339,2.033,340,3.419,341,2.874,342,4.605,343,3.419,344,2.738,345,2.515,346,3.419,347,4.377,348,3.419,349,3.871,350,4.605,351,3.419,352,3.419,353,3.419,354,2.515,355,3.419,356,3.419,357,1.702,358,2.874,359,3.419,360,3.419,361,3.419]],["title/modules/CaslModule.html",[54,1.213,62,1.978]],["body/modules/CaslModule.html",[3,0.458,4,0.458,5,0.311,14,0.028,28,0.564,29,0.952,40,0.458,41,0.136,52,0.023,53,0.023,54,1.976,56,2.02,57,2.299,62,3.861,65,2.941,66,2.388,67,2.02,69,3.223,254,4.557,317,3.343,362,3.7,363,3.7,364,3.7,365,4.402,366,2.893]],["title/classes/DeleteUserPolicyHandler.html",[41,0.103,367,1.978]],["body/classes/DeleteUserPolicyHandler.html",[3,0.419,4,0.419,5,0.285,9,0.468,10,1.392,14,0.029,22,0.682,24,1.094,28,0.587,34,1.583,35,1.469,40,0.534,41,0.125,50,1.015,52,0.022,53,0.022,126,0.655,181,1.177,182,0.742,183,1.015,242,1.109,262,2.006,322,3.049,328,2.964,339,3.727,357,2.006,366,2.648,367,3.049,368,3.37,369,2.648,370,3.37,371,3.531,372,4.311,373,4.742,374,4.029,375,2.396,376,4.311,377,3.772,378,2.396,379,2.964,380,2.396,381,3.387]],["title/entities/Folder.html",[382,1.656,383,1.526]],["body/entities/Folder.html",[3,0.396,4,0.396,5,0.269,9,0.442,13,2.284,14,0.029,22,0.984,28,0.515,40,0.396,41,0.118,47,1.555,52,0.021,53,0.021,126,0.675,138,2.263,153,1.614,182,1.071,242,1.393,262,1.895,275,2.894,277,2.097,304,2.52,382,2.462,383,2.52,384,3.199,385,5.491,386,4.04,387,3.806,388,4.944,389,4.944,390,3.806,391,4.04,392,3.806,393,3.199,394,4.944,395,4.156,396,4.156,397,3.806,398,4.156]],["title/injectables/FolderService.html",[173,0.838,399,1.805]],["body/injectables/FolderService.html",[3,0.332,4,0.332,5,0.225,9,0.37,10,1.192,11,2.736,14,0.029,22,0.961,24,1.469,27,2.636,28,0.591,29,0.69,40,0.332,41,0.099,42,1.726,46,1.353,50,1.43,52,0.019,53,0.019,80,1.588,126,0.583,153,1.863,173,1.107,174,1.463,181,1.582,182,0.997,183,1.364,187,1.588,213,2.987,243,3.376,275,1.588,304,2.015,354,3.231,383,2.915,399,2.383,400,2.681,401,2.612,402,4.55,403,3.189,404,4.55,405,3.189,406,4.392,407,2.681,408,3.189,409,4.392,410,3.189,411,3.189,412,3.692,413,3.189,414,2.346,415,2.681,416,3.189,417,3.189,418,3.189,419,3.189,420,3.189,421,3.189,422,3.189,423,3.189,424,3.189]],["title/controllers/FoldersController.html",[0,1.411,425,2.186]],["body/controllers/FoldersController.html",[0,1.443,2,1.443,3,0.354,4,0.354,5,0.24,9,0.395,10,1.246,13,2.185,14,0.029,22,0.942,24,1.509,27,1.947,28,0.541,29,0.736,40,0.354,41,0.105,43,1.443,45,2.023,46,1.443,50,1.463,52,0.019,53,0.019,126,0.533,181,1.518,182,0.957,183,1.309,197,2.503,213,2.729,224,2.236,225,4.366,354,3.376,383,2.948,399,2.818,401,2.023,402,4.674,407,2.86,412,2.86,414,2.503,425,3.017,426,2.86,427,3.402,428,4.59,429,3.402,430,3.402,431,4.59,432,3.402,433,5.194,434,3.402,435,5.194,436,3.402,437,2.86,438,3.402,439,3.402,440,3.402,441,3.402,442,3.402,443,3.402,444,3.402,445,3.402,446,3.402,447,3.402,448,3.402,449,3.402]],["title/modules/FoldersModule.html",[54,1.213,63,1.978]],["body/modules/FoldersModule.html",[2,2.255,3,0.444,4,0.444,5,0.301,14,0.029,28,0.649,29,0.922,40,0.444,41,0.132,52,0.023,53,0.023,54,1.938,56,1.957,57,2.255,63,3.782,65,2.884,66,2.314,67,1.957,69,3.161,70,2.804,78,2.804,80,2.124,383,1.957,399,3.45,414,3.138,425,3.806,437,3.586,450,3.586,451,3.586,452,4.266,453,4.266,454,4.266]],["title/interfaces/IPolicyHandler.html",[371,1.978,375,1.978]],["body/interfaces/IPolicyHandler.html",[3,0.421,4,0.421,5,0.286,9,0.469,10,1.394,14,0.029,22,0.684,24,1.097,28,0.588,34,1.588,35,1.473,40,0.535,41,0.125,50,1.018,52,0.022,53,0.022,126,0.656,181,1.181,182,0.744,183,1.018,242,1.111,262,2.012,322,3.055,328,2.972,339,3.73,366,2.656,367,2.403,368,3.377,369,2.656,370,2.656,371,3.535,372,4.319,373,4.748,375,2.403,376,4.748,377,3.779,378,2.403,379,2.972,380,2.403,381,3.397,455,4.04,456,4.04]],["title/injectables/JwtAuthGuard.html",[173,0.838,457,2.186]],["body/injectables/JwtAuthGuard.html",[3,0.395,4,0.395,5,0.268,7,0.956,9,0.441,10,1.34,14,0.029,22,0.836,24,1.03,28,0.605,29,0.821,40,0.395,41,0.118,42,1.491,45,2.257,50,1.243,52,0.021,53,0.021,126,0.573,145,1.89,173,1.243,174,1.742,181,1.442,182,0.909,183,1.243,199,3.63,234,3.191,241,1.742,258,2.495,268,2.935,457,3.244,458,4.61,459,3.191,460,3.244,461,4.148,462,3.191,463,5.187,464,3.795,465,4.148,466,4.881,467,3.795,468,3.191,469,2.495,470,3.795,471,2.792,472,3.191,473,3.795,474,3.191,475,4.148,476,3.795,477,3.191,478,3.795,479,3.795]],["title/injectables/JwtStrategy.html",[173,0.838,252,1.978]],["body/injectables/JwtStrategy.html",[3,0.335,4,0.335,5,0.227,7,0.811,9,0.374,10,1.2,11,2.141,14,0.029,22,0.749,24,1.2,27,2.141,28,0.613,29,0.696,40,0.335,41,0.157,42,2.135,43,2.141,46,1.875,52,0.019,53,0.019,73,4.035,74,1.914,126,0.513,173,1.114,174,1.477,181,1.292,182,0.814,183,1.114,187,2.201,212,4.244,228,2.412,229,2.116,237,2.706,241,1.477,242,0.696,252,2.629,258,2.116,262,1.603,268,3.232,271,2.706,287,3.252,288,4.19,299,2.706,304,1.477,472,2.706,474,2.706,480,2.706,481,5.048,482,3.219,483,3.219,484,3.219,485,5.434,486,3.219,487,4.42,488,4.42,489,3.716,490,3.252,491,3.219,492,3.219,493,2.706,494,3.219,495,3.219,496,3.219,497,3.219,498,2.368,499,3.219,500,3.219,501,3.219,502,3.219,503,4.42,504,4.42,505,4.42]],["title/classes/LoginDto.html",[41,0.103,203,1.978]],["body/classes/LoginDto.html",[3,0.411,4,0.411,5,0.279,7,0.995,9,0.458,13,1.989,14,0.029,22,0.857,28,0.527,32,1.966,40,0.411,41,0.183,47,1.854,52,0.021,53,0.021,126,0.588,132,2.394,134,2.585,145,2.52,200,3.724,203,3.01,217,3.327,277,2.147,357,1.966,506,3.319,507,3.724,508,3.319,509,3.948,510,4.336,511,2.904,512,3.948,513,4.111,514,3.724,515,4.111,516,2.904,517,2.595,518,3.327,519,2.904]],["title/classes/PasswordTransformer.html",[41,0.103,520,2.186]],["body/classes/PasswordTransformer.html",[3,0.389,4,0.389,5,0.264,7,1.371,9,0.434,10,1.325,14,0.029,22,0.827,24,1.325,28,0.508,40,0.389,41,0.169,43,2.071,47,2.094,50,1.23,52,0.021,53,0.021,126,0.567,134,2.071,153,1.584,181,1.427,182,0.899,183,1.23,357,1.859,370,3.209,520,3.209,521,3.139,522,3.592,523,5.44,524,4.882,525,3.734,526,4.882,527,4.85,528,5.26,529,4.882,530,3.734,531,4.882,532,4.104,533,3.139,534,3.734]],["title/classes/PatchUserDto.html",[41,0.103,535,1.978]],["body/classes/PatchUserDto.html",[3,0.355,4,0.355,5,0.241,7,0.859,9,0.396,13,2.187,14,0.029,22,0.943,28,0.479,32,1.698,40,0.355,41,0.173,47,1.957,52,0.02,53,0.02,126,0.646,132,2.283,134,2.465,145,1.698,182,1.07,216,2.734,242,0.994,277,1.95,306,3.456,357,1.698,507,2.509,510,4.577,511,2.509,513,4.275,514,3.382,515,4.404,516,2.509,517,2.241,518,2.241,519,2.509,535,2.734,536,4.885,537,2.867,538,3.865,539,3.41,540,3.41,541,3.41,542,3.865,543,3.865,544,3.41,545,3.41,546,3.41,547,3.41,548,3.865,549,2.867,550,2.867]],["title/guards/PoliciesGuard.html",[460,2.186,551,1.978]],["body/guards/PoliciesGuard.html",[3,0.344,4,0.344,5,0.233,9,0.384,10,1.221,11,2.17,14,0.029,22,0.867,24,1.221,27,1.909,28,0.599,29,0.714,40,0.344,41,0.102,42,1.298,45,1.965,50,1.289,52,0.019,53,0.019,126,0.594,173,1.134,181,1.495,182,0.943,183,1.289,187,2.735,241,2.348,242,0.714,317,3.022,322,3.418,339,3.267,366,2.172,370,2.172,378,3.267,379,2.431,380,1.965,461,4.618,462,2.777,463,4.986,465,3.783,466,4.618,468,2.777,469,2.172,477,2.777,551,2.676,552,3.304,553,2.777,554,4.5,555,3.304,556,3.304,557,4.5,558,3.304,559,4.5,560,3.31,561,2.777,562,2.777,563,3.304,564,3.304,565,3.304,566,3.304,567,3.304,568,3.304,569,3.304,570,2.431,571,3.304,572,3.304]],["title/classes/RegisterDto.html",[41,0.103,219,1.978]],["body/classes/RegisterDto.html",[3,0.351,4,0.351,5,0.238,7,0.849,9,0.391,13,2.176,14,0.029,22,0.938,28,0.475,32,1.677,40,0.351,41,0.172,47,1.951,52,0.019,53,0.019,126,0.643,132,2.274,134,2.454,145,2.757,182,1.066,201,3.833,217,2.997,219,2.711,277,1.934,306,3.441,357,1.677,507,4.074,508,2.832,510,4.564,511,2.478,513,4.257,514,3.354,515,4.388,516,2.478,517,2.214,518,3.64,519,2.478,542,3.833,543,3.833,548,3.833,549,2.832,550,2.832,573,2.832,574,3.369,575,3.369,576,3.369,577,3.369,578,3.369,579,3.369]],["title/entities/User.html",[242,0.719,382,1.656]],["body/entities/User.html",[3,0.267,4,0.267,5,0.181,7,0.646,9,0.298,13,2.274,14,0.029,22,0.98,28,0.544,40,0.267,41,0.152,47,1.888,52,0.016,53,0.016,126,0.672,132,2.053,134,2.216,136,2.041,138,1.526,145,1.873,153,1.088,155,1.088,182,1.039,183,0.948,215,1.526,242,1.13,259,2.252,261,1.686,275,1.873,277,1.596,304,2.044,305,3.107,306,3.107,344,2.237,382,2.719,383,2.506,386,3.277,391,4.821,498,1.887,520,3.225,522,3.277,527,3.163,580,2.157,581,4.455,582,4.151,583,2.566,584,3.762,585,3.762,586,2.566,587,2.566,588,3.163,589,2.566,590,2.768,591,2.566,592,2.566,593,3.762,594,3.762,595,2.157,596,3.762,597,2.566,598,2.566,599,3.762,600,3.762,601,3.762,602,3.762,603,3.762,604,2.566,605,3.163,606,2.768,607,3.163,608,3.163,609,2.566,610,2.566,611,3.762,612,4.455,613,2.566,614,2.566,615,2.566]],["title/entities/UserRoles.html",[259,1.526,382,1.656]],["body/entities/UserRoles.html",[3,0.334,4,0.334,5,0.227,7,0.809,8,3.247,9,0.373,13,1.981,14,0.029,22,0.854,28,0.525,34,1.262,35,1.171,40,0.334,41,0.156,52,0.019,53,0.019,126,0.63,138,1.91,153,1.362,238,4.564,242,1.375,259,2.025,275,2.197,277,1.872,289,3.71,304,2.314,305,2.624,329,4.784,344,3.582,345,2.363,349,3.71,382,2.928,386,3.709,391,4.513,393,2.7,395,3.71,396,3.71,398,3.71,401,2.624,590,3.247,595,2.7,605,3.71,606,3.247,607,3.71,608,3.71,616,4.564,617,2.7,618,3.211,619,3.211,620,5.429,621,3.568,622,3.211,623,4.413,624,3.71,625,3.247,626,4.413,627,4.413,628,3.211,629,2.111]],["title/controllers/UsersController.html",[0,1.411,630,2.186]],["body/controllers/UsersController.html",[0,1.637,2,0.859,3,0.211,4,0.211,5,0.143,7,1.524,9,0.235,10,0.854,11,2.345,13,1.71,14,0.029,16,3.67,18,4.357,20,3.67,21,3.67,22,0.737,24,1.461,27,2.397,28,0.576,29,0.438,30,2.646,31,3.83,32,1.009,34,0.796,35,0.739,40,0.211,41,0.063,42,0.796,43,1.999,45,1.205,46,0.859,47,1.638,48,3.279,50,1.097,52,0.013,53,0.013,126,0.448,132,2.261,136,1.708,155,0.859,181,1.272,182,0.802,183,1.097,197,1.49,215,1.872,216,2.295,224,1.332,226,1.703,228,1.71,241,0.93,242,1.424,243,1.205,293,2.069,313,1.49,341,1.703,367,1.872,380,1.205,401,2.803,535,2.588,538,4.194,551,1.205,562,1.703,629,1.332,630,2.069,631,1.703,632,2.026,633,3.86,634,3.148,635,3.148,636,3.148,637,2.026,638,2.026,639,2.026,640,3.86,641,2.026,642,3.148,643,3.148,644,2.646,645,2.026,646,3.148,647,2.026,648,4.353,649,2.646,650,3.148,651,2.646,652,3.659,653,4.194,654,2.026,655,2.026,656,4.989,657,2.026,658,2.646,659,2.316,660,2.026,661,2.026,662,2.026,663,2.646,664,2.646,665,2.646,666,2.026,667,1.703,668,1.49,669,2.026,670,1.703,671,2.026,672,1.703,673,1.703,674,1.703,675,2.026,676,2.026,677,2.026,678,2.026,679,3.86,680,2.026,681,2.026,682,1.703,683,1.703,684,2.026,685,2.026,686,2.026,687,2.026,688,2.026,689,2.026,690,2.026]],["title/modules/UsersModule.html",[54,1.213,64,1.978]],["body/modules/UsersModule.html",[2,2.075,3,0.39,4,0.39,5,0.265,14,0.029,28,0.675,29,0.81,40,0.39,41,0.116,52,0.021,53,0.021,54,1.783,56,1.718,57,2.075,64,3.776,65,2.654,66,2.031,67,1.718,69,2.909,70,2.461,78,2.461,80,1.864,228,2.415,242,1.058,259,2.244,261,2.461,265,3.147,317,3.061,457,3.215,469,2.461,551,2.909,629,2.461,630,3.58,670,3.147,674,3.147,691,3.744,692,3.744,693,3.744,694,4.891,695,3.744,696,3.744,697,3.744,698,3.744,699,3.744,700,3.744]],["title/injectables/UsersService.html",[173,0.838,228,1.307]],["body/injectables/UsersService.html",[3,0.172,4,0.172,5,0.117,7,0.675,9,0.192,10,0.727,11,2.195,14,0.029,16,1.217,21,1.217,22,0.815,24,1.505,26,1.217,27,2.532,28,0.554,29,0.358,34,0.65,35,0.603,40,0.172,41,0.051,42,1.526,43,2.195,44,1.454,46,1.136,47,1.842,49,1.971,50,1.151,52,0.011,53,0.011,80,0.823,126,0.559,132,2.413,134,2.195,136,2.107,153,0.701,155,1.647,173,0.675,174,0.759,181,1.406,182,0.923,183,1.212,187,1.334,213,2.309,215,1.593,216,2.978,219,2.537,228,1.053,241,1.958,242,1.384,243,2.309,259,1.55,261,1.087,275,1.933,293,1.761,294,1.39,304,1.55,305,2.008,313,2.485,314,1.971,315,1.39,334,1.217,344,0.983,401,2.86,404,4.35,415,1.39,532,2.252,533,2.252,535,2.537,582,1.971,588,1.39,590,1.971,606,1.217,621,1.087,625,1.971,629,1.087,644,2.252,652,3.839,653,4.66,659,1.971,663,3.264,664,2.252,665,2.839,667,1.39,672,1.39,673,1.39,683,2.252,701,1.39,702,2.679,703,2.679,704,1.654,705,3.377,706,1.654,707,3.377,708,2.679,709,1.654,710,2.679,711,2.679,712,1.654,713,2.679,714,2.679,715,1.654,716,2.679,717,1.654,718,4.567,719,2.679,720,1.654,721,2.679,722,1.654,723,2.679,724,2.679,725,1.654,726,1.654,727,1.654,728,1.654,729,1.654,730,1.654,731,1.654,732,1.654,733,1.654,734,1.654,735,1.654,736,1.654,737,1.654,738,1.654,739,1.654,740,1.654,741,1.654,742,1.39,743,1.654,744,1.654,745,2.679,746,1.39,747,1.654,748,1.654,749,1.654,750,1.654,751,1.654,752,1.654,753,1.654,754,1.654,755,1.654,756,1.654,757,1.39,758,1.654,759,1.654,760,1.654,761,2.252,762,1.654,763,1.654,764,1.654,765,1.654,766,1.654,767,1.654,768,1.654,769,1.654,770,1.654,771,1.217,772,1.654]],["title/coverage.html",[773,3.8]],["body/coverage.html",[0,2.168,1,1.84,5,0.198,6,2.354,14,0.029,36,1.519,38,1.84,41,0.168,52,0.017,53,0.017,126,0.325,155,1.188,173,1.46,175,2.354,194,1.84,195,1.84,196,2.354,203,1.665,219,1.665,228,1.1,230,1.519,242,0.867,252,1.665,259,1.285,276,2.354,317,1.394,318,2.06,367,1.665,368,2.635,369,2.635,371,1.665,375,1.665,382,2.331,383,1.285,384,2.354,399,1.519,400,2.354,425,1.84,426,2.354,457,1.84,458,2.354,459,2.354,460,1.84,471,2.06,480,2.354,506,2.354,520,1.84,521,2.354,535,1.665,536,2.354,537,2.354,551,1.665,553,2.354,560,2.06,570,2.06,573,2.354,580,2.354,616,2.354,617,2.354,630,1.84,631,2.354,668,2.06,701,2.354,773,2.354,774,2.8,775,2.8,776,2.354,777,5.348,778,3.37,779,6.503,780,6.26,781,6.474,782,2.8,783,5.409,784,2.354,785,3.37,786,2.354,787,5.112,788,2.8,789,2.8,790,3.37,791,4.682,792,3.37,793,3.37,794,2.8,795,2.354,796,2.949,797,2.354,798,2.8,799,2.8,800,3.979,801,2.354,802,2.354,803,5.628,804,2.354,805,2.354,806,2.354,807,2.8,808,2.8,809,2.354]],["title/dependencies.html",[57,1.695,810,2.343]],["body/dependencies.html",[5,0.245,14,0.029,29,0.75,32,1.728,41,0.144,52,0.02,53,0.02,57,1.472,74,2.064,76,2.917,77,2.917,80,1.728,81,2.917,83,2.281,84,3.449,88,2.917,89,2.917,153,1.472,256,2.553,258,2.281,268,2.064,300,2.917,327,2.917,469,2.281,493,2.917,517,2.281,522,2.553,582,2.553,811,3.47,812,6.246,813,3.47,814,4.652,815,3.47,816,3.47,817,3.47,818,3.47,819,3.47,820,3.47,821,3.47,822,3.47,823,3.47,824,4.652,825,3.91,826,3.47,827,3.47,828,3.47,829,3.47,830,3.47,831,3.47,832,3.47,833,3.47,834,3.47,835,3.47,836,5.606,837,3.47,838,3.47,839,2.917,840,3.47,841,3.47,842,3.47,843,3.47,844,3.47,845,3.47,846,3.47,847,3.47,848,3.47,849,3.47,850,3.47,851,3.47,852,3.47,853,3.47,854,3.47,855,3.47,856,3.47,857,3.47,858,3.47,859,3.47,860,3.47,861,3.47,862,3.47,863,3.47,864,3.47,865,3.47,866,3.47]],["title/miscellaneous/functions.html",[867,1.512,868,3.358]],["body/miscellaneous/functions.html",[9,0.597,14,0.025,52,0.025,53,0.025,800,3.782,801,5.275,867,2.789,868,4.322,869,4.322]],["title/index.html",[9,0.324,870,2.343,871,2.05]],["body/index.html",[5,0.229,7,0.643,8,3.041,14,0.027,35,1.181,47,0.49,48,1.023,52,0.011,53,0.011,54,1.507,57,1.374,67,1.897,83,2.462,84,1.676,97,1.309,99,2.383,101,1.309,103,1.309,105,1.309,107,1.309,109,1.309,111,1.309,113,1.309,115,1.309,120,1.309,124,3.266,126,0.296,132,0.612,134,1.082,136,2.956,143,2.723,146,2.383,153,2.075,155,0.66,176,2.723,182,0.287,183,0.392,191,3.927,194,1.676,213,1.517,214,1.309,286,1.309,287,1.876,288,1.145,296,1.309,297,2.144,298,1.309,303,2.144,314,3.041,334,3.041,347,1.309,358,1.309,383,1.487,489,2.144,490,1.145,518,2.462,561,1.309,621,2.717,625,2.383,651,1.309,682,3.149,746,1.309,757,1.309,761,1.309,777,2.144,796,3.041,809,1.309,839,2.144,871,1.145,872,2.55,873,1.557,874,2.55,875,3.24,876,1.557,877,1.557,878,1.557,879,2.55,880,1.557,881,2.55,882,1.557,883,1.557,884,3.24,885,1.557,886,2.55,887,4.134,888,4.44,889,3.746,890,4.688,891,2.55,892,3.24,893,2.55,894,2.55,895,3.24,896,1.557,897,4.688,898,1.557,899,2.55,900,1.557,901,1.557,902,4.44,903,1.557,904,1.557,905,1.557,906,1.557,907,3.746,908,2.55,909,5.632,910,3.746,911,3.746,912,1.557,913,2.55,914,1.557,915,1.557,916,1.557,917,4.688,918,2.55,919,2.55,920,2.55,921,3.24,922,2.55,923,1.557,924,1.557,925,1.557,926,1.557,927,1.557,928,5.212,929,3.746,930,1.557,931,1.557,932,1.557,933,1.557,934,2.55,935,1.557,936,1.557,937,1.557,938,1.557,939,1.557,940,1.309,941,2.55,942,1.557,943,1.557,944,3.24,945,3.24,946,4.893,947,1.557,948,3.746,949,1.557,950,1.557,951,3.24,952,1.557,953,1.557,954,1.557,955,1.557,956,2.55,957,1.557,958,4.893,959,1.557,960,1.557,961,1.557,962,1.557,963,1.557,964,2.55,965,1.557,966,1.557,967,1.557,968,1.557,969,1.557,970,1.557,971,1.557,972,1.557,973,3.746,974,2.144,975,1.557,976,1.557,977,2.55,978,1.557,979,1.557,980,1.557,981,1.557,982,1.557,983,1.557,984,1.557,985,1.557,986,1.557,987,2.55,988,1.557,989,1.557,990,1.557,991,1.557,992,2.55,993,1.557,994,1.557,995,1.557,996,1.309,997,3.149,998,2.55,999,2.55,1000,1.557,1001,1.557,1002,1.557,1003,1.557,1004,1.309,1005,1.557,1006,1.557,1007,2.55,1008,1.557,1009,1.557,1010,1.557,1011,2.55,1012,1.557,1013,1.557,1014,1.557,1015,3.24,1016,2.723,1017,1.557,1018,1.557,1019,1.557,1020,2.55,1021,2.55,1022,1.557,1023,1.557,1024,1.557,1025,1.557,1026,2.55,1027,1.557,1028,1.557,1029,1.557,1030,1.557,1031,1.557,1032,2.55,1033,1.557,1034,1.557,1035,1.557,1036,1.557,1037,1.557,1038,2.55,1039,1.557,1040,2.55,1041,1.557,1042,1.557,1043,1.557,1044,1.557,1045,1.557,1046,1.557,1047,1.557,1048,1.557,1049,2.55,1050,3.746,1051,1.557,1052,1.557,1053,1.557,1054,3.24,1055,2.55,1056,1.557,1057,1.557,1058,1.557,1059,1.557,1060,1.557,1061,1.557,1062,1.557,1063,1.557,1064,1.557,1065,1.557,1066,1.557,1067,1.557,1068,1.557,1069,1.557,1070,1.557,1071,1.557,1072,3.24,1073,2.55,1074,1.557,1075,3.24,1076,2.55,1077,2.55,1078,2.55,1079,2.55,1080,1.557,1081,2.55,1082,2.55,1083,2.144,1084,2.55,1085,1.557,1086,1.557,1087,1.557,1088,2.144,1089,2.55,1090,1.557,1091,1.557,1092,1.557,1093,1.557,1094,1.557,1095,1.557,1096,1.557,1097,1.557,1098,1.557,1099,1.557,1100,1.557,1101,1.557,1102,1.557,1103,1.557,1104,1.557,1105,1.557,1106,1.557,1107,1.557,1108,1.557,1109,1.557,1110,1.557,1111,1.557,1112,1.557,1113,1.557,1114,1.557,1115,1.557,1116,1.557,1117,1.557,1118,1.557,1119,1.309,1120,1.557,1121,1.557,1122,1.557,1123,1.557,1124,1.557,1125,1.557,1126,1.557,1127,1.023,1128,1.145,1129,1.557,1130,1.309]],["title/license.html",[870,2.343,871,2.05,1127,1.832]],["body/license.html",[14,0.021,52,0.021,53,0.021,67,1.791,194,2.565,293,2.565,338,3.281,624,3.281,658,3.281,742,3.281,940,4.672,974,3.281,996,3.281,997,4.224,1016,3.281,1083,3.281,1127,2.565,1128,3.697,1131,5.557,1132,3.903,1133,3.903,1134,3.903,1135,5.025,1136,3.903,1137,3.903,1138,3.903,1139,3.903,1140,3.903,1141,3.903,1142,5.025,1143,6.472,1144,3.903,1145,3.903,1146,3.903,1147,5.025,1148,3.903,1149,3.903,1150,3.903,1151,3.903,1152,3.903,1153,3.903,1154,3.903,1155,3.903,1156,3.903,1157,5.025,1158,3.903,1159,3.903,1160,3.903,1161,3.903,1162,5.025,1163,5.025,1164,3.903,1165,3.903,1166,3.903,1167,3.903,1168,3.903,1169,3.903,1170,3.903,1171,3.903,1172,3.903,1173,3.903,1174,3.903,1175,3.903,1176,3.903,1177,3.903,1178,3.903,1179,3.903,1180,3.903,1181,3.903,1182,3.903,1183,3.903,1184,3.903,1185,3.903,1186,3.903,1187,3.903,1188,3.903]],["title/modules.html",[56,2.074]],["body/modules.html",[14,0.024,52,0.024,53,0.024,55,3.166,56,2.211,61,2.865,62,2.865,63,2.865,64,2.865,825,5.425,1119,5.425,1189,6.453,1190,6.453]],["title/overview.html",[1191,3.8]],["body/overview.html",[2,1.538,14,0.028,36,2.91,52,0.02,53,0.02,55,4.297,56,1.664,57,2.031,58,3.048,59,3.048,60,3.048,61,3.862,62,3.623,63,3.527,64,3.695,65,2.598,66,1.967,67,1.664,138,2.156,174,1.664,228,2.241,230,3.371,249,3.048,250,3.048,251,3.048,252,3.695,317,3.14,357,1.805,362,3.048,363,3.048,364,3.048,375,2.156,399,2.91,450,3.048,451,3.048,460,2.383,771,3.523,1191,3.048,1192,4.789,1193,3.626,1194,3.626,1195,3.626]],["title/properties.html",[277,1.695,810,2.343]],["body/properties.html",[14,0.028,52,0.025,53,0.025,277,2.157,1127,3.342,1128,3.74,1130,4.274,1196,4.274,1197,5.084,1198,5.084,1199,5.084]],["title/miscellaneous/typealiases.html",[867,1.512,1200,3.995]],["body/miscellaneous/typealiases.html",[9,0.556,14,0.027,52,0.024,53,0.024,126,0.556,318,3.52,322,2.845,326,4.022,332,4.792,339,3.39,368,3.144,369,4.003,371,2.845,377,4.48,378,3.39,570,3.52,867,2.596,1201,4.784,1202,5.701,1203,5.701]],["title/miscellaneous/variables.html",[867,1.512,1204,3.358]],["body/miscellaneous/variables.html",[7,1.066,9,0.351,14,0.029,38,2.78,47,1.815,52,0.018,53,0.018,99,3.112,124,2.223,126,0.723,145,2.106,155,1.794,182,0.557,191,4.244,193,2.54,242,1.204,259,1.941,304,2.24,305,1.797,306,1.797,344,2.516,345,3.112,378,1.797,380,2.516,471,3.112,475,2.54,490,3.112,498,2.223,528,5.412,560,3.112,621,4.232,649,2.54,659,2.223,668,3.112,771,3.89,776,2.54,778,4.445,784,2.54,785,2.54,786,3.556,790,2.54,792,2.54,793,4.103,795,2.54,796,3.89,797,2.54,800,2.223,802,3.556,804,3.556,805,3.556,806,3.556,867,1.639,869,4.445,1004,2.54,1088,2.54,1196,2.54,1204,2.54,1205,4.23,1206,3.021,1207,3.021,1208,4.23,1209,3.021,1210,3.021,1211,4.23,1212,3.021,1213,3.021,1214,3.021,1215,4.23,1216,3.021,1217,3.021,1218,3.021,1219,3.021,1220,3.021]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1197,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["0.3.10",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":771,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.7.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":789,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":912,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["2018",{"_index":1133,"title":{},"body":{"license.html":{}}}],["20m",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":993,"title":{},"body":{"index.html":{}}}],["255",{"_index":594,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1194,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":788,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1063,"title":{},"body":{"index.html":{}}}],["4",{"_index":1193,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":994,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":758,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1192,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":389,"title":{},"body":{"entities/Folder.html":{}}}],["6.0.0",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1195,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":807,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":322,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":381,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["abilitybuilder",{"_index":323,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":324,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["above",{"_index":1161,"title":{},"body":{"license.html":{}}}],["abstraction",{"_index":1102,"title":{},"body":{"index.html":{}}}],["access",{"_index":349,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":966,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1019,"title":{},"body":{"index.html":{}}}],["account",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["action",{"_index":1183,"title":{},"body":{"license.html":{}}}],["acts",{"_index":1101,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1009,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1017,"title":{},"body":{"index.html":{}}}],["add(this.expiration",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["again",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":999,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1201,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":991,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1155,"title":{},"body":{"license.html":{}}}],["angular",{"_index":884,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":745,"title":{},"body":{"injectables/UsersService.html":{}}}],["anvarov",{"_index":1199,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1028,"title":{},"body":{"index.html":{}}}],["api",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":513,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":539,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":545,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty()@matches(/^[a",{"_index":541,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":507,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1094,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1118,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":694,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":339,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":176,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":881,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1121,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.controller.test.ts",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1202,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":869,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1203,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":175,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/auth/auth.controller.test.ts",{"_index":784,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.controller.ts",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.controller.ts:37",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:51",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":785,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:21",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:41",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:68",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":506,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:16",{"_index":512,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:26",{"_index":509,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":573,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:22",{"_index":575,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:32",{"_index":579,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:42",{"_index":577,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:52",{"_index":578,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":458,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":480,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":790,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":318,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:21",{"_index":321,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":365,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":792,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":553,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":556,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":558,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":555,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":368,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":795,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":797,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/folders/folder.controller.ts",{"_index":426,"title":{},"body":{"controllers/FoldersController.html":{},"coverage.html":{}}}],["apps/api/src/folders/folder.controller.ts:13",{"_index":434,"title":{},"body":{"controllers/FoldersController.html":{}}}],["apps/api/src/folders/folder.controller.ts:23",{"_index":429,"title":{},"body":{"controllers/FoldersController.html":{}}}],["apps/api/src/folders/folder.controller.ts:30",{"_index":436,"title":{},"body":{"controllers/FoldersController.html":{}}}],["apps/api/src/folders/folder.controller.ts:35",{"_index":432,"title":{},"body":{"controllers/FoldersController.html":{}}}],["apps/api/src/folders/folder.entity.ts",{"_index":384,"title":{},"body":{"entities/Folder.html":{},"coverage.html":{}}}],["apps/api/src/folders/folder.entity.ts:10",{"_index":387,"title":{},"body":{"entities/Folder.html":{}}}],["apps/api/src/folders/folder.entity.ts:13",{"_index":390,"title":{},"body":{"entities/Folder.html":{}}}],["apps/api/src/folders/folder.entity.ts:16",{"_index":392,"title":{},"body":{"entities/Folder.html":{}}}],["apps/api/src/folders/folder.entity.ts:22",{"_index":397,"title":{},"body":{"entities/Folder.html":{}}}],["apps/api/src/folders/folder.module.ts",{"_index":452,"title":{},"body":{"modules/FoldersModule.html":{}}}],["apps/api/src/folders/folder.service.ts",{"_index":400,"title":{},"body":{"injectables/FolderService.html":{},"coverage.html":{}}}],["apps/api/src/folders/folder.service.ts:13",{"_index":411,"title":{},"body":{"injectables/FolderService.html":{}}}],["apps/api/src/folders/folder.service.ts:21",{"_index":408,"title":{},"body":{"injectables/FolderService.html":{}}}],["apps/api/src/folders/folder.service.ts:27",{"_index":413,"title":{},"body":{"injectables/FolderService.html":{}}}],["apps/api/src/folders/folder.service.ts:31",{"_index":410,"title":{},"body":{"injectables/FolderService.html":{}}}],["apps/api/src/folders/folder.service.ts:7",{"_index":405,"title":{},"body":{"injectables/FolderService.html":{}}}],["apps/api/src/main.ts",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/dto/patch",{"_index":536,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":521,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":530,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":525,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":616,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":580,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:19",{"_index":589,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:25",{"_index":610,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:31",{"_index":591,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:37",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:43",{"_index":587,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:49",{"_index":604,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:53",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/user.entity.ts:65",{"_index":598,"title":{},"body":{"entities/User.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:41",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:53",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:71",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:85",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":693,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:108",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:131",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:22",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:40",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:49",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:59",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:76",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":190,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":920,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1187,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1144,"title":{},"body":{"license.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":696,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":459,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":464,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":467,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/register.dto",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":695,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":195,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["authenticating",{"_index":998,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["authentication/authorization",{"_index":903,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":470,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":473,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1130,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":1177,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":230,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":971,"title":{},"body":{"index.html":{}}}],["await",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":901,"title":{},"body":{"index.html":{}}}],["bad",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":601,"title":{},"body":{"entities/User.html":{}}}],["behind",{"_index":982,"title":{},"body":{"index.html":{}}}],["below",{"_index":938,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1014,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":623,"title":{},"body":{"entities/UserRoles.html":{}}}],["body",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FoldersController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":897,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":376,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["bootstrap",{"_index":801,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":907,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1020,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1110,"title":{},"body":{"index.html":{}}}],["brew",{"_index":918,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1190,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":825,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":342,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["building",{"_index":876,"title":{},"body":{"index.html":{}}}],["built",{"_index":965,"title":{},"body":{"index.html":{}}}],["c",{"_index":1132,"title":{},"body":{"license.html":{}}}],["can(useractionsenum.manage",{"_index":346,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":351,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":352,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":461,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":465,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1051,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":396,"title":{},"body":{"entities/Folder.html":{},"entities/UserRoles.html":{}}}],["casl",{"_index":331,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":366,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":327,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":697,"title":{},"body":{"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["caslfactory",{"_index":317,"title":{"injectables/CaslFactory.html":{}},"body":{"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":62,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["cert.pem",{"_index":1061,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1050,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1053,"title":{},"body":{"index.html":{}}}],["change",{"_index":1029,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1139,"title":{},"body":{"license.html":{}}}],["check",{"_index":561,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":560,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["checks",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":919,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1022,"title":{},"body":{"index.html":{}}}],["choose",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":889,"title":{},"body":{"index.html":{}}}],["claim",{"_index":1180,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":357,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["clone",{"_index":941,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":362,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":364,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":363,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_foldersmodule",{"_index":450,"title":{},"body":{"modules/FoldersModule.html":{},"overview.html":{}}}],["cluster_foldersmodule_providers",{"_index":451,"title":{},"body":{"modules/FoldersModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":691,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":692,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1087,"title":{},"body":{"index.html":{}}}],["column",{"_index":391,"title":{},"body":{"entities/Folder.html":{},"entities/User.html":{},"entities/UserRoles.html":{}}}],["column({length",{"_index":388,"title":{},"body":{"entities/Folder.html":{}}}],["column({name",{"_index":592,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":619,"title":{},"body":{"entities/UserRoles.html":{}}}],["column({unique",{"_index":609,"title":{},"body":{"entities/User.html":{}}}],["comes",{"_index":902,"title":{},"body":{"index.html":{}}}],["coming",{"_index":340,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":951,"title":{},"body":{"index.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["compose",{"_index":934,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1160,"title":{},"body":{"license.html":{}}}],["config",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":888,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1108,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":961,"title":{},"body":{"index.html":{}}}],["connection",{"_index":996,"title":{},"body":{"index.html":{},"license.html":{}}}],["connections",{"_index":1008,"title":{},"body":{"index.html":{}}}],["console.log('thanh',deleted.affected",{"_index":769,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(folder",{"_index":444,"title":{},"body":{"controllers/FoldersController.html":{}}}],["const",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(folderrepo",{"_index":403,"title":{},"body":{"injectables/FolderService.html":{}}}],["constructor(jwtservice",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":178,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/FoldersController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":462,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(userrepository",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":977,"title":{},"body":{"index.html":{}}}],["contents",{"_index":885,"title":{},"body":{"index.html":{}}}],["context",{"_index":468,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":478,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":477,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":565,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["contract",{"_index":1184,"title":{},"body":{"license.html":{}}}],["control",{"_index":925,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FoldersController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FoldersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('v1/auth",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('v1/folders",{"_index":438,"title":{},"body":{"controllers/FoldersController.html":{}}}],["controller('v1/users",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copies",{"_index":1157,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1142,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1131,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1030,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":773,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":949,"title":{},"body":{"index.html":{}}}],["create",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(@body",{"_index":443,"title":{},"body":{"controllers/FoldersController.html":{}}}],["create(folder",{"_index":407,"title":{},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{}}}],["create(payload",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":625,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createforuser",{"_index":319,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":320,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createquerybuilder('users",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtoken",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":330,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["crud",{"_index":904,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":532,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":533,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":757,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["damages",{"_index":1181,"title":{},"body":{"license.html":{}}}],["data",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1104,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1062,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":1145,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1188,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Folder.html":{},"controllers/FoldersController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1096,"title":{},"body":{"index.html":{}}}],["default",{"_index":621,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":401,"title":{},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":431,"title":{},"body":{"controllers/FoldersController.html":{}}}],["delete(':username",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":409,"title":{},"body":{"injectables/FolderService.html":{}}}],["delete(username",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":770,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteresult",{"_index":417,"title":{},"body":{"injectables/FolderService.html":{}}}],["deleteuser",{"_index":428,"title":{},"body":{"controllers/FoldersController.html":{}}}],["deleteuser(@param",{"_index":448,"title":{},"body":{"controllers/FoldersController.html":{}}}],["deleteuser(params",{"_index":430,"title":{},"body":{"controllers/FoldersController.html":{}}}],["deleteuserbyusername",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":367,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1076,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":981,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":922,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":887,"title":{},"body":{"index.html":{}}}],["describe",{"_index":1092,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":932,"title":{},"body":{"index.html":{}}}],["detached",{"_index":978,"title":{},"body":{"index.html":{}}}],["details",{"_index":358,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":356,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":359,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":986,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1126,"title":{},"body":{"index.html":{}}}],["development",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1007,"title":{},"body":{"index.html":{}}}],["directory",{"_index":975,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1153,"title":{},"body":{"license.html":{}}}],["docker",{"_index":909,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1075,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1080,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1086,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["download",{"_index":945,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":930,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":914,"title":{},"body":{"index.html":{}}}],["dto",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/login.dto",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/patch",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register.dto",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["dynamic",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["edit",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edit(payload",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["efficient",{"_index":877,"title":{},"body":{"index.html":{}}}],["email",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1114,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1066,"title":{},"body":{"index.html":{}}}],["employs",{"_index":599,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":1001,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1042,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":989,"title":{},"body":{"index.html":{}}}],["end",{"_index":1082,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1004,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Folder.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":382,"title":{"entities/Folder.html":{},"entities/User.html":{},"entities/UserRoles.html":{}},"body":{"entities/Folder.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":620,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":948,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":950,"title":{},"body":{"index.html":{}}}],["environment",{"_index":796,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["event",{"_index":1176,"title":{},"body":{"license.html":{}}}],["everything",{"_index":350,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["example",{"_index":1117,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":611,"title":{},"body":{"entities/User.html":{}}}],["exec",{"_index":1071,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":554,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":557,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":973,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":466,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["exist",{"_index":766,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":953,"title":{},"body":{"index.html":{}}}],["exists",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirationformatted",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1006,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":959,"title":{},"body":{"index.html":{}}}],["express",{"_index":1016,"title":{},"body":{"index.html":{},"license.html":{}}}],["extends",{"_index":472,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1107,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":325,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":597,"title":{},"body":{"entities/User.html":{}}}],["fastify",{"_index":839,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["feat",{"_index":1112,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1048,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1036,"title":{},"body":{"index.html":{}}}],["features",{"_index":905,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":510,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["fields",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1083,"title":{},"body":{"index.html":{},"license.html":{}}}],["findall",{"_index":402,"title":{},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{}}}],["findone",{"_index":420,"title":{},"body":{"injectables/FolderService.html":{}}}],["fitness",{"_index":1173,"title":{},"body":{"license.html":{}}}],["folder",{"_index":383,"title":{"entities/Folder.html":{}},"body":{"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["folder.controller",{"_index":453,"title":{},"body":{"modules/FoldersModule.html":{}}}],["folder.entity",{"_index":414,"title":{},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{}}}],["folder.service",{"_index":437,"title":{},"body":{"controllers/FoldersController.html":{},"modules/FoldersModule.html":{}}}],["folder.user",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["folderrepo",{"_index":406,"title":{},"body":{"injectables/FolderService.html":{}}}],["folders",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["folders/folder.entity",{"_index":614,"title":{},"body":{"entities/User.html":{}}}],["folders/folder.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["folderscontroller",{"_index":425,"title":{"controllers/FoldersController.html":{}},"body":{"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"coverage.html":{}}}],["folderservice",{"_index":399,"title":{"injectables/FolderService.html":{}},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"coverage.html":{},"overview.html":{}}}],["foldersmodule",{"_index":63,"title":{"modules/FoldersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FoldersModule.html":{},"modules.html":{},"overview.html":{}}}],["follow",{"_index":935,"title":{},"body":{"index.html":{}}}],["following",{"_index":974,"title":{},"body":{"index.html":{},"license.html":{}}}],["format",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["format('lll",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":875,"title":{},"body":{"index.html":{}}}],["free",{"_index":1138,"title":{},"body":{"license.html":{}}}],["from(value",{"_index":524,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1081,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1122,"title":{},"body":{"index.html":{}}}],["function",{"_index":570,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":868,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1159,"title":{},"body":{"license.html":{}}}],["further",{"_index":1106,"title":{},"body":{"index.html":{}}}],["generate",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1054,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":440,"title":{},"body":{"controllers/FoldersController.html":{}}}],["get(':username",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(@param",{"_index":441,"title":{},"body":{"controllers/FoldersController.html":{}}}],["get(id",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusernameandpass(username",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["getstartingmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":870,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@request",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(req",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(@param('username",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":942,"title":{},"body":{"index.html":{}}}],["github",{"_index":1073,"title":{},"body":{"index.html":{}}}],["given",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":526,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["granted",{"_index":1137,"title":{},"body":{"license.html":{}}}],["gravatar",{"_index":582,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":460,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":552,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1044,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1046,"title":{},"body":{"index.html":{}}}],["handle",{"_index":372,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handle(ability",{"_index":373,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["handler",{"_index":559,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":571,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":572,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":380,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":369,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:17",{"_index":374,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:7",{"_index":456,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":527,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{}}}],["hashed",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":882,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1136,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1178,"title":{},"body":{"license.html":{}}}],["host",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1084,"title":{},"body":{"index.html":{}}}],["http",{"_index":753,"title":{},"body":{"injectables/UsersService.html":{}}}],["http/2",{"_index":1040,"title":{},"body":{"index.html":{}}}],["http2",{"_index":891,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":960,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":967,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":980,"title":{},"body":{"index.html":{}}}],["https",{"_index":1043,"title":{},"body":{"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":355,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":943,"title":{},"body":{"index.html":{}}}],["https://typeorm.io",{"_index":1034,"title":{},"body":{"index.html":{}}}],["iat",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["igenericmessagebody",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ijwtresponsebody",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":370,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{}}}],["implied",{"_index":1169,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":1164,"title":{},"body":{"license.html":{}}}],["including",{"_index":1147,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":326,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{}}}],["inject(winston_module_provider",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":173,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/FolderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/FolderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":174,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/FolderService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":415,"title":{},"body":{"injectables/FolderService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(folder",{"_index":418,"title":{},"body":{"injectables/FolderService.html":{}}}],["injectrepository(user",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":883,"title":{},"body":{"index.html":{}}}],["interface",{"_index":375,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":455,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":371,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":471,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalphanumeric",{"_index":514,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isemail",{"_index":548,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":515,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["ispublic",{"_index":475,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":992,"title":{},"body":{"index.html":{}}}],["item",{"_index":360,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":361,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["javascript",{"_index":915,"title":{},"body":{"index.html":{}}}],["joi",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":457,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":252,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":761,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":762,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1060,"title":{},"body":{"index.html":{}}}],["keyout",{"_index":1059,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":336,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["kind",{"_index":1168,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1103,"title":{},"body":{"index.html":{}}}],["layout",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1000,"title":{},"body":{"index.html":{}}}],["length",{"_index":593,"title":{},"body":{"entities/User.html":{}}}],["level",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["liability",{"_index":1182,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1179,"title":{},"body":{"license.html":{}}}],["library",{"_index":1032,"title":{},"body":{"index.html":{}}}],["license",{"_index":1127,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1129,"title":{},"body":{"index.html":{}}}],["limit",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":1148,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1170,"title":{},"body":{"license.html":{}}}],["loads",{"_index":976,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":929,"title":{},"body":{"index.html":{}}}],["locally",{"_index":913,"title":{},"body":{"index.html":{}}}],["located",{"_index":1052,"title":{},"body":{"index.html":{}}}],["location",{"_index":1098,"title":{},"body":{"index.html":{}}}],["logger",{"_index":179,"title":{},"body":{"injectables/AppService.html":{}}}],["logging",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":203,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logs",{"_index":894,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["luckily",{"_index":1041,"title":{},"body":{"index.html":{}}}],["made",{"_index":898,"title":{},"body":{"index.html":{}}}],["main",{"_index":1111,"title":{},"body":{"index.html":{}}}],["make",{"_index":910,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1047,"title":{},"body":{"index.html":{}}}],["manage",{"_index":333,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":939,"title":{},"body":{"index.html":{}}}],["many",{"_index":607,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["manytoone",{"_index":398,"title":{},"body":{"entities/Folder.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":393,"title":{},"body":{"entities/Folder.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1100,"title":{},"body":{"index.html":{}}}],["matches",{"_index":549,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matches(/^[a",{"_index":550,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxfiles",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["merchantability",{"_index":1172,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1151,"title":{},"body":{"license.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":516,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":519,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["mins",{"_index":995,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":867,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1128,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":956,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1150,"title":{},"body":{"license.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":778,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":1026,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1038,"title":{},"body":{"index.html":{}}}],["msanvarov",{"_index":1134,"title":{},"body":{"license.html":{}}}],["mssql",{"_index":1027,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":921,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1021,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":182,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1002,"title":{},"body":{"index.html":{}}}],["nest",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":469,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/FolderService.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1057,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":983,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":874,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1064,"title":{},"body":{"index.html":{}}}],["non",{"_index":908,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1175,"title":{},"body":{"license.html":{}}}],["notacceptableexception",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["notice",{"_index":1162,"title":{},"body":{"license.html":{}}}],["npm",{"_index":946,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["number",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":896,"title":{},"body":{"index.html":{}}}],["object",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(payload).foreach((key",{"_index":760,"title":{},"body":{"injectables/UsersService.html":{}}}],["obtaining",{"_index":1141,"title":{},"body":{"license.html":{}}}],["offers",{"_index":1012,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":395,"title":{},"body":{"entities/Folder.html":{},"entities/UserRoles.html":{}}}],["one",{"_index":606,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":612,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":1088,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":802,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":804,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":805,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":806,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1055,"title":{},"body":{"index.html":{}}}],["operation",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":933,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1011,"title":{},"body":{"index.html":{}}}],["optional",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":987,"title":{},"body":{"index.html":{}}}],["os",{"_index":1125,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1186,"title":{},"body":{"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outlined",{"_index":937,"title":{},"body":{"index.html":{}}}],["over",{"_index":1015,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1191,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":810,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1074,"title":{},"body":{"index.html":{}}}],["panel",{"_index":926,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FoldersController.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('username",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":433,"title":{},"body":{"controllers/FoldersController.html":{}}}],["parent",{"_index":385,"title":{},"body":{"entities/Folder.html":{}}}],["particular",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{},"license.html":{}}}],["passion",{"_index":1124,"title":{},"body":{"index.html":{}}}],["passport",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":613,"title":{},"body":{"entities/User.html":{}}}],["passwords",{"_index":600,"title":{},"body":{"entities/User.html":{}}}],["passwordtransformer",{"_index":520,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"coverage.html":{}}}],["patch",{"_index":538,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["patch()@apiresponse({status",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(payload",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":535,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["path",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload[key",{"_index":764,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1010,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1013,"title":{},"body":{"index.html":{}}}],["permission",{"_index":1135,"title":{},"body":{"license.html":{}}}],["permit",{"_index":624,"title":{},"body":{"entities/UserRoles.html":{},"license.html":{}}}],["persistence",{"_index":906,"title":{},"body":{"index.html":{}}}],["person",{"_index":1140,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1158,"title":{},"body":{"license.html":{}}}],["pg",{"_index":756,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":954,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1045,"title":{},"body":{"index.html":{}}}],["plaintoclass(user",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":562,"title":{},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":793,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":551,"title":{"guards/PoliciesGuard.html":{}},"body":{"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":379,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":378,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":377,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":563,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":567,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":1166,"title":{},"body":{"license.html":{}}}],["ports",{"_index":964,"title":{},"body":{"index.html":{}}}],["post",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FoldersController.html":{}}}],["post('login",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":1025,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FoldersController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":886,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":386,"title":{},"body":{"entities/Folder.html":{},"entities/User.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":936,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1079,"title":{},"body":{"index.html":{}}}],["production",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"entities/UserRoles.html":{}}}],["profiles",{"_index":626,"title":{},"body":{"entities/UserRoles.html":{}}}],["profileservice",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["progress",{"_index":1109,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":873,"title":{},"body":{"index.html":{}}}],["project",{"_index":970,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"entities/Folder.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":752,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":900,"title":{},"body":{"index.html":{}}}],["provide",{"_index":699,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":1095,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":985,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1120,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register')@apiresponse({status",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":1152,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1174,"title":{},"body":{"license.html":{}}}],["put",{"_index":435,"title":{},"body":{"controllers/FoldersController.html":{}}}],["queried",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["quickly",{"_index":899,"title":{},"body":{"index.html":{}}}],["r",{"_index":755,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1065,"title":{},"body":{"index.html":{}}}],["random",{"_index":990,"title":{},"body":{"index.html":{}}}],["react",{"_index":962,"title":{},"body":{"index.html":{}}}],["read",{"_index":347,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1115,"title":{},"body":{"index.html":{}}}],["received",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["record",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["records",{"_index":772,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":463,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{}}}],["register(@body",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":219,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerpayload",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1099,"title":{},"body":{"index.html":{}}}],["relations",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":608,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1123,"title":{},"body":{"index.html":{}}}],["remark",{"_index":334,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":952,"title":{},"body":{"index.html":{}}}],["repo",{"_index":895,"title":{},"body":{"index.html":{}}}],["repository",{"_index":404,"title":{},"body":{"injectables/FolderService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":605,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":337,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["req.user",{"_index":341,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiresponse({status",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":518,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":955,"title":{},"body":{"index.html":{}}}],["rest",{"_index":944,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1093,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1146,"title":{},"body":{"license.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":984,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1037,"title":{},"body":{"index.html":{}}}],["rights",{"_index":1149,"title":{},"body":{"license.html":{}}}],["role",{"_index":344,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":617,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":618,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":622,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":628,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":603,"title":{},"body":{"entities/User.html":{}}}],["roles",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["rsa:4096",{"_index":1058,"title":{},"body":{"index.html":{}}}],["run",{"_index":958,"title":{},"body":{"index.html":{}}}],["running",{"_index":1068,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":916,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":754,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1003,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1198,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":878,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":596,"title":{},"body":{"entities/User.html":{}}}],["self",{"_index":1049,"title":{},"body":{"index.html":{}}}],["sell",{"_index":1156,"title":{},"body":{"license.html":{}}}],["served",{"_index":972,"title":{},"body":{"index.html":{}}}],["server",{"_index":879,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":746,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('username",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["shall",{"_index":1163,"title":{},"body":{"license.html":{}}}],["short",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":880,"title":{},"body":{"index.html":{}}}],["signed",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{}}}],["sits",{"_index":1005,"title":{},"body":{"index.html":{}}}],["software",{"_index":1143,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"modules/FoldersModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1067,"title":{},"body":{"index.html":{}}}],["special",{"_index":335,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1090,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1024,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1033,"title":{},"body":{"index.html":{}}}],["stack",{"_index":923,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":931,"title":{},"body":{"index.html":{}}}],["start",{"_index":928,"title":{},"body":{"index.html":{}}}],["started",{"_index":871,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":872,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["statements",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1018,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":481,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Folder.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":338,"title":{},"body":{"injectables/CaslFactory.html":{},"license.html":{}}}],["subjects",{"_index":332,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sublicense",{"_index":1154,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1165,"title":{},"body":{"license.html":{}}}],["sudo",{"_index":747,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":474,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":479,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1119,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1035,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1023,"title":{},"body":{"index.html":{}}}],["sure",{"_index":911,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1189,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1089,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":767,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":809,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":1113,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":968,"title":{},"body":{"index.html":{}}}],["test",{"_index":1072,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":892,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1070,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(user",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslfactory.createforuser(user",{"_index":566,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":568,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.folderrepo.delete(id",{"_index":424,"title":{},"body":{"injectables/FolderService.html":{}}}],["this.folderrepo.find",{"_index":419,"title":{},"body":{"injectables/FolderService.html":{}}}],["this.folderrepo.findone(id",{"_index":421,"title":{},"body":{"injectables/FolderService.html":{}}}],["this.folderrepo.save(folder",{"_index":422,"title":{},"body":{"injectables/FolderService.html":{}}}],["this.folderrepo.update(folder.id",{"_index":423,"title":{},"body":{"injectables/FolderService.html":{}}}],["this.folderservice.create(folder",{"_index":445,"title":{},"body":{"controllers/FoldersController.html":{}}}],["this.folderservice.delete(params.id",{"_index":449,"title":{},"body":{"controllers/FoldersController.html":{}}}],["this.folderservice.findall",{"_index":439,"title":{},"body":{"controllers/FoldersController.html":{}}}],["this.folderservice.findoneby(params.id",{"_index":442,"title":{},"body":{"controllers/FoldersController.html":{}}}],["this.folderservice.update(folder",{"_index":447,"title":{},"body":{"controllers/FoldersController.html":{}}}],["this.getbyusername(payload.username",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(username",{"_index":759,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.info('calling",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["this.reflector.get",{"_index":564,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":476,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userrepository",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":750,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":768,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":749,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":765,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":748,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.delete(username",{"_index":690,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(payload",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyusernameandpass",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":1039,"title":{},"body":{"index.html":{}}}],["time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["to(value",{"_index":529,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["tokens",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["tort",{"_index":1185,"title":{},"body":{"license.html":{}}}],["transform",{"_index":531,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":522,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":927,"title":{},"body":{"index.html":{}}}],["true",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":511,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["true})@isemail()@isnotempty",{"_index":574,"title":{},"body":{"classes/RegisterDto.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":508,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["true})@matches(/^[a",{"_index":576,"title":{},"body":{"classes/RegisterDto.html":{}}}],["try",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1200,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":893,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1078,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1085,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":569,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["typeorm",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"entities/Folder.html":{},"injectables/FolderService.html":{},"classes/PasswordTransformer.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([folder",{"_index":454,"title":{},"body":{"modules/FoldersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1077,"title":{},"body":{"index.html":{}}}],["ui",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":595,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{}}}],["unique",{"_index":615,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1069,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["up",{"_index":979,"title":{},"body":{"index.html":{}}}],["update",{"_index":354,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/FolderService.html":{},"controllers/FoldersController.html":{}}}],["update(@body",{"_index":446,"title":{},"body":{"controllers/FoldersController.html":{}}}],["update(folder",{"_index":412,"title":{},"body":{"injectables/FolderService.html":{},"controllers/FoldersController.html":{}}}],["updateresult",{"_index":416,"title":{},"body":{"injectables/FolderService.html":{}}}],["url",{"_index":588,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":751,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":997,"title":{},"body":{"index.html":{},"license.html":{}}}],["useclass",{"_index":700,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1091,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":242,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":537,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":540,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:30",{"_index":547,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:38",{"_index":544,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:46",{"_index":546,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.entity",{"_index":629,"title":{},"body":{"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.folders",{"_index":394,"title":{},"body":{"entities/Folder.html":{}}}],["user.roles",{"_index":627,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":343,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":353,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user[key",{"_index":763,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":328,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{}}}],["username",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userrepository",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":786,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":259,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/User.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":329,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":345,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":698,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.entity",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/Folder.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":630,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":228,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":957,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":988,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":590,"title":{},"body":{"entities/User.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["v1/auth",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["v1/folders",{"_index":427,"title":{},"body":{"controllers/FoldersController.html":{}}}],["v1/users",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":517,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":528,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":534,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":523,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":777,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1204,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1196,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":917,"title":{},"body":{"index.html":{}}}],["view",{"_index":1105,"title":{},"body":{"index.html":{}}}],["vue",{"_index":963,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":1171,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1167,"title":{},"body":{"license.html":{}}}],["web",{"_index":890,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":189,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.username",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["window",{"_index":969,"title":{},"body":{"index.html":{}}}],["winston",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["winstonfilerotator",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":940,"title":{},"body":{"index.html":{},"license.html":{}}}],["work",{"_index":1097,"title":{},"body":{"index.html":{}}}],["world",{"_index":1116,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1031,"title":{},"body":{"index.html":{}}}],["write",{"_index":348,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":602,"title":{},"body":{"entities/User.html":{}}}],["x509",{"_index":1056,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":924,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":947,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":543,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["za",{"_index":542,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["zippedarchive",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/FoldersModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getStartingMessage(): Promise {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nFoldersModule\n\nFoldersModule\n\nAppModule -->\n\nFoldersModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            FoldersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { FoldersModule } from './folders/folder.module';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { UsersModule } from './users/users.module';\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'nest-typeorm-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'nest-typeorm-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule,\n    UsersModule,\n    CaslModule,\n    FoldersModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IJWTResponseBody } from '@starter/api-types';\n\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { Public } from './public.decorator';\n\n/**\n * Authentication Controller\n */\n@ApiTags('authentication')\n@Controller('v1/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} usersService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginDto): Promise {\n    const user = await this.authService.validateUser(payload);\n    return this.authService.createToken(user);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterDto) {\n    const user = await this.usersService.create(payload);\n    return this.authService.createToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([User, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy, UsersService],\n  exports: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                users service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:21\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as moment from 'moment';\n\nimport { IJWTResponseBody } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {User} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    roles,\n    email,\n  }: User): Promise {\n    return {\n      expiration: this.expiration,\n      expirationFormatted: moment()\n        .add(this.expiration, 'seconds')\n        .format('LLL'),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        roles,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ username, password }: LoginDto): Promise {\n    const user = await this.usersService.getByUsernameAndPass(\n      username,\n      password,\n    );\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: User) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    can(UserActionsEnum.Update, User, { username: user.username }); // update own user\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Folder.html":{"url":"entities/Folder.html","title":"entity - Folder","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Folder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/folders/folder.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                parent\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/folders/folder.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/folders/folder.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/folders/folder.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.folders, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/folders/folder.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../users/user.entity';\n@Entity(\n  {\n    name: 'folder',\n  }\n)\nexport class Folder {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({length: 500 })\n    name: string;\n\n    @Column()\n    parent: number;\n\n  \n    @ManyToOne(() => User, (user) => user.folders, {\n      onDelete: 'CASCADE',\n    })\n    user: User;\n     \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FolderService.html":{"url":"injectables/FolderService.html","title":"injectable - FolderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FolderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/folders/folder.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(folderRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/folders/folder.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        folderRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(folder: Folder)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/folders/folder.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/folders/folder.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/folders/folder.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(folder: Folder)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/folders/folder.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Folder } from './folder.entity';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UpdateResult, DeleteResult } from  'typeorm';\n@Injectable()\nexport class FolderService {\n    constructor(\n    @InjectRepository(Folder)\n        private readonly folderRepo: Repository,\n    ) {}\n\n    async findAll (): Promise {\n        return await this.folderRepo.find();\n    }\n\n    // async findOne (id: number): Promise {\n    //     return await this.folderRepo.findOne(id)\n    //   }\n\n    async create (folder: Folder): Promise {\n        return await this.folderRepo.save(folder)\n    }\n    \n    \n\n    async update(folder: Folder): Promise {\n        return await this.folderRepo.update(folder.id, folder);\n    }\n\n    async delete(id): Promise {\n        return await this.folderRepo.delete(id);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FoldersController.html":{"url":"controllers/FoldersController.html","title":"controller - FoldersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FoldersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/folders/folder.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/folders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                deleteUser\n                            \n                            \n                                findAll\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(folder: Folder)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/folders/folder.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/folders/folder.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/folders/folder.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(folder: Folder)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/folders/folder.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { FolderService } from './folder.service';\nimport { Controller, Get, Post, Put, Delete, Body, Param } from '@nestjs/common';\nimport { Folder } from './folder.entity';\n\n\n@Controller('v1/folders')\nexport class FoldersController {\n    constructor(private readonly FolderService: FolderService) {\n\n    }\n  \n    @Get()\n    findAll(): Promise {\n      return this.FolderService.findAll()\n    }\n  \n    // @Get(':id')\n    // get(@Param() params) {\n    //   return this.FolderService.findOneBy(params.id);\n    // }\n  \n    @Post()\n    create(@Body() folder: Folder) {\n    \n      console.log(folder);\n      return this.FolderService.create(folder);\n    }\n  \n    @Put()\n    update(@Body() folder: Folder) {\n      return this.FolderService.update(folder);\n    }\n  \n    @Delete(':id')\n    deleteUser(@Param() params) {\n      return this.FolderService.delete(params.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FoldersModule.html":{"url":"modules/FoldersModule.html","title":"module - FoldersModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldersModule\n\n\n\ncluster_FoldersModule_providers\n\n\n\n\nFolderService\n\nFolderService\n\n\n\nFoldersModule\n\nFoldersModule\n\nFoldersModule -->\n\nFolderService->FoldersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/folders/folder.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FolderService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FoldersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { FolderService } from './folder.service';\nimport { Module } from '@nestjs/common';\nimport { FoldersController } from './folder.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Folder } from './folder.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Folder])],\n  controllers: [FoldersController],\n  providers: [FolderService],\n})\nexport class FoldersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { User } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, User);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({ iat, exp, id }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:26\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:16\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:38\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:46\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:22\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:42\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:52\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:32\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                folders\n                            \n                            \n                                gravatar\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        folders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Folder[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, folder => folder.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    Name column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:65\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\nimport { Folder } from '../folders/folder.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class User {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  gravatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  \n  @OneToMany(() => Folder, (folder) => folder.user)\n  folders?: Folder[];\n  \n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { User } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => User, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    patchUser(payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiResponse({status: 200, description: 'Patch User Request Received'})@ApiResponse({status: 400, description: 'Patch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:71\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('v1/users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves current authenticated user\n   * @returns {Promise} queried user data\n   */\n  @Get('user')\n  getUser(@Request() req) {\n    return req.user;\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Patch()\n  @ApiResponse({ status: 200, description: 'Patch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch User Request Failed' })\n  async patchUser(@Body() payload: PatchUserDto): Promise {\n    return this.usersService.edit(payload);\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, UserRoles])],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchUserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:108\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsernameAndPass\n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { User } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.username = :username and users.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        gravatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {PatchUserDto} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(payload: PatchUserDto): Promise {\n    const { username } = payload;\n    const user = await this.getByUsername(username);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n\n    const deleted = await this.userRepository.delete({ username });\n    console.log('thanh',deleted.affected);\n    if (deleted.affected === 1) {\n      \n      \n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/folders/folder.controller.ts\n            \n            controller\n            FoldersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/folders/folder.entity.ts\n            \n            entity\n            Folder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/folders/folder.service.ts\n            \n            injectable\n            FolderService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (8/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.10\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Thus, I created a boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 msanvarov\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FoldersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_FoldersModule\n\n\n\ncluster_FoldersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nFoldersModule\n\nFoldersModule\n\nAppModule -->\n\nFoldersModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nFolderService\n\nFolderService\n\nFoldersModule -->\n\nFolderService->FoldersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects<> | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            moduleMocker   (apps/.../auth.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(User, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
